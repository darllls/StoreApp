@page "/supplies"
@inject ISupplyService SupplyService
@inject NavigationManager NavigationManager
@inject IJSRuntime _js
@using Radzen.Blazor

<_DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<h3>Supplies</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <select class="form-select" @bind="SelectedSupplierId">
            <option value="">All Suppliers</option>
            @foreach (var supplier in Suppliers)
            {
                <option value="@supplier.SupplierId">@supplier.Name</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <input type="text" class="form-control" placeholder="Search..." @bind="searchText" />
    </div>
    <div class="col-md-3">
        <button class="btn btn-success mb-3" @onclick="CreateSupply"> + Create</button>
    </div>
</div>

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50" AllowPaging="true" AllowSorting="true"
                    Data="@FilteredSupplies" TItem="SupplyDTO">
        <Columns>
            <RadzenDataGridColumn TItem="SupplyDTO" Property="SupplyNumber" Title="Number" Width="100px" />
            <RadzenDataGridColumn TItem="SupplyDTO" Property="SupplierName" Title="Supplier" Width="150px">
                <Template Context="data">
                    <RadzenButton Click="@(args => ViewSupplierInfo(data.SupplierId))" Icon="info" ButtonStyle="ButtonStyle.Light" Style="width: 100%;">
                        @data.SupplierName
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SupplyDTO" Property="Sum" Title="Sum ₴" Width="100px" />
            <RadzenDataGridColumn TItem="SupplyDTO" Property="SupplyDate" Title="Date" Width="100px">
                <Template Context="data">
                    @data.SupplyDate?.ToString("dd.MM.yyyy")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SupplyDTO" Property="StatusName" Title="Status" Width="100px" />
            <RadzenDataGridColumn TItem="SupplyDTO" Title="Actions" Width="200px">
                <Template Context="data">
                    <RadzenButton Click="@(args => ViewSupplyDetails(data.SupplyId))" Icon="visibility" ButtonStyle="ButtonStyle.Dark" Text="Details" Style="margin-right: 5px;" />
                <RadzenButton Click="@(args => UpdateSupply(data.SupplyId))" Icon="edit" ButtonStyle="ButtonStyle.Primary" Style="margin-right: 5px;"  />
                    <RadzenButton Click="@(args => DeleteSupply(data.SupplyId))" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="margin-right: 5px;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

<_SupplyDetailsModal SupplyId="@SelectedSupplyId"></_SupplyDetailsModal>
<_SupplierInfoModal SupplierId="@selectedSupplierId"></_SupplierInfoModal>

@code {
    private List<SupplyDTO> Supplies { get; set; } = new List<SupplyDTO>();
    private List<SupplierDTO> Suppliers { get; set; } = new List<SupplierDTO>();
    private bool IsProcessing { get; set; }
    private int SelectedSupplyId { get; set; }
    private string searchText { get; set; } = "";
    private int? SelectedSupplierId { get; set; }
    private int? selectedSupplierId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (uri.Query.Contains("search"))
        {
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            searchText = query["search"];
        }
        await LoadSupplies();
        await LoadSuppliers();
    }

    private async Task LoadSupplies()
    {
        IsProcessing = true;
        Supplies = await SupplyService.GetAllSupplies();
        IsProcessing = false;
    }

    private async Task LoadSuppliers()
    {
        Suppliers = await SupplyService.GetSuppliers();
    }

    private IEnumerable<SupplyDTO> FilteredSupplies =>
    Supplies.Where(s =>
        (SelectedSupplierId == null || s.SupplierId == SelectedSupplierId) &&
        (string.IsNullOrEmpty(searchText) ||
        s.SupplierName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
        s.SupplyNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
        s.SupplyDetails.Any(sd => sd.ShipmentInvoices.Any(si => si.EmployeeName.Contains(searchText, StringComparison.OrdinalIgnoreCase))) ||
        s.StatusName.Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    private void CreateSupply()
    {
        NavigationManager.NavigateTo("/supplies/create");
    }

    private void UpdateSupply(int supplyId)
    {
        NavigationManager.NavigateTo($"/supplies/edit/{supplyId}");
    }

    private async Task DeleteSupply(int supplyId)
    {
        SelectedSupplyId = supplyId;
        await _js.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && SelectedSupplyId != 0)
        {
            await SupplyService.DeleteSupply(SelectedSupplyId);
            await _js.ToastrSuccess("Supply deleted successfully.");
            await LoadSupplies();
            await _js.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsProcessing = false;
    }

    private async Task ViewSupplyDetails(int supplyId)
    {
        SelectedSupplyId = supplyId;
        await _js.InvokeVoidAsync("ShowSupplyModal");
    }

    private async Task ViewSupplierInfo(int? supplierId)
    {
        selectedSupplierId = supplierId;
        await _js.InvokeVoidAsync("ShowSupplierModal");
    }
}

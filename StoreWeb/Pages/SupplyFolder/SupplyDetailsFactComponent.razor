@page "/suppliesfact"

@inject ISupplyDetailsFactService SupplyDetailsFactService
@inject NavigationManager NavigationManager
@inject IJSRuntime _js

<h3>Supply Details Facts</h3>

<div class="row mb-3">
    <div class="col-md-2">
        <select class="form-select" @bind="SelectedSupplyNumber">
            <option value="">All Supply Numbers</option>
            @foreach (var supplyNumber in SupplyNumbers.OrderBy(s => s))
            {
                <option value="@supplyNumber">@supplyNumber</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <select class="form-select" @bind="SelectedProductName">
            <option value="">All Product Names</option>
            @foreach (var productName in ProductNames.OrderBy(p => p))
            {
                <option value="@productName">@productName</option>
            }
        </select>
    </div>
    <div class="col-md-4">
        <div class="form-check form-check-lg">
            <input class="form-check-input" type="checkbox" @bind="ShowNonNullUnitBuyDateDifference" />
            <label class="form-check-label">Show only non-null UnitBuyDateDifference</label>
        </div>
    </div>
    <div class="col-md-4 text-end">
        <button class="btn btn-outline-success" @onclick="ExportToCsv"><span class="material-icons">download</span> Export to CSV</button>
    </div>
</div>

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Supply Number</th>
                <th>Product Name</th>
                <th>Supply Date</th>
                <th>Unit Buy Date Difference</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var fact in FilteredSupplyDetailsFacts)
            {
                <tr>
                    <td>@fact.SupplyNumber</td>
                    <td>@fact.ProductName</td>
                    <td>@fact.SupplyDate?.ToString("dd.MM.yyyy")</td>
                    <td>@(fact.UnitBuyDateDifference.HasValue ? fact.UnitBuyDateDifference.ToString() : "-")</td>
                    <td>
                        <button class="btn btn-outline-dark" @onclick="() => ViewSupplyDetailsFact(fact.SupplyDetailsId)">
                            <span class="material-icons">visibility</span> View Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<_SupplyDetailsFactModal SupplyDetailsFactId="SelectedSupplyDetailsFactId"></_SupplyDetailsFactModal>

@code {
    private List<SupplyDetailsFactDTO> SupplyDetailsFacts { get; set; } = new List<SupplyDetailsFactDTO>();
    private bool IsProcessing { get; set; }
    private string SelectedSupplyNumber { get; set; } = "";
    private string SelectedProductName { get; set; } = "";
    private List<string> SupplyNumbers { get; set; } = new List<string>();
    private List<string> ProductNames { get; set; } = new List<string>();
    private bool ShowNonNullUnitBuyDateDifference { get; set; } = false;
    private int SelectedSupplyDetailsFactId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        SupplyDetailsFacts = await SupplyDetailsFactService.GetAllSupplyDetailsFacts();
        SupplyNumbers = SupplyDetailsFacts.Select(f => f.SupplyNumber).Distinct().ToList();
        ProductNames = SupplyDetailsFacts.Select(f => f.ProductName).Distinct().ToList();
        IsProcessing = false;
    }

    private async Task ViewSupplyDetailsFact(int supplyDetailsFactId)
    {
        SelectedSupplyDetailsFactId = supplyDetailsFactId;
        await _js.InvokeVoidAsync("ShowSupFactModal");
    }

    private IEnumerable<SupplyDetailsFactDTO> FilteredSupplyDetailsFacts =>
        SupplyDetailsFacts.Where(f =>
            (string.IsNullOrEmpty(SelectedSupplyNumber) || f.SupplyNumber == SelectedSupplyNumber) &&
            (string.IsNullOrEmpty(SelectedProductName) || f.ProductName == SelectedProductName) &&
            (!ShowNonNullUnitBuyDateDifference || f.UnitBuyDateDifference.HasValue));

    private async Task ExportToCsv()
    {
        var records = FilteredSupplyDetailsFacts.ToList();

        if (records.Any())
        {
            using var memoryStream = new MemoryStream();
            using (var writer = new StreamWriter(memoryStream))
            using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
            {
                csv.WriteRecords(records);
                await writer.FlushAsync();
            }

            var csvData = memoryStream.ToArray();
            var fileName = "SupplyDetailsFacts.csv";

            // Use NavigationManager to trigger download
            var base64 = Convert.ToBase64String(csvData);
            var url = $"data:text/csv;base64,{base64}";
            NavigationManager.NavigateTo(url);
            await _js.ToastrSuccess("CSV file successfully exported.");
        }
        else
        {
            await _js.ToastrFailure("No records to export.");
        }
    }

}

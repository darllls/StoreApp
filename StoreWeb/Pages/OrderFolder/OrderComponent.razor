@page "/orders"
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject IJSRuntime _js
@using Radzen.Blazor

<_DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<h3>Orders</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <select class="form-select" @bind="selectedStoreName">
            <option value="">All Stores</option>
            @foreach (var storeName in GetUniqueStoreNames())
            {
                <option value="@storeName">@storeName</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <input type="text" class="form-control" placeholder="Search..." @bind="searchText" />
    </div>
    <div class="col-md-3">
        <button class="btn btn-success mb-3" @onclick="CreateOrder"> + Create</button>
    </div>
</div>

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50" AllowPaging="true" AllowSorting="true"
                    Data="FilteredOrders" TItem="OrderDTO">
        <Columns>
            <RadzenDataGridColumn TItem="OrderDTO" Property="Number" Title="Number" Width="150px" />
            <RadzenDataGridColumn TItem="OrderDTO" Title="Customer Name" Width="150px">
                <Template Context="data">
                    @data.CustomerName
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrderDTO" Property="EmployeeName" Title="Employee Name" Width="150px" />
            <RadzenDataGridColumn TItem="OrderDTO" Property="StoreName" Title="Store Name" Width="120px" />
            <RadzenDataGridColumn TItem="OrderDTO" Property="CityName" Title="City" Width="100px" />
            <RadzenDataGridColumn TItem="OrderDTO" Property="TotalAmount" Title="Total ₴" Width="150px" />
            <RadzenDataGridColumn TItem="OrderDTO" Property="OrderDate" Title="Date" Width="100px">
                <Template Context="data">
                    @data.OrderDate.ToString("dd.MM.yyyy")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrderDTO" Title="Actions" Width="200px">
                <Template Context="data">
                    <RadzenButton Click="@(args => ViewOrderItems(data.OrderId))" Icon="visibility" ButtonStyle="ButtonStyle.Dark" Text="Items" Style="margin-right: 5px;" />
                    <RadzenButton Click="@(args => UpdateOrder(data.OrderId))" Icon="edit" Style="margin-right: 5px;" />
                    <RadzenButton Click="@(args => DeleteOrder(data.OrderId))" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

<_OrderItemsModal OrderId="SelectedOrderId"></_OrderItemsModal>

@code {
    private List<OrderDTO> Orders { get; set; } = new List<OrderDTO>();
    private bool IsProcessing { get; set; }
    private int SelectedOrderId { get; set; }
    private string searchText { get; set; } = "";
    private string selectedStoreName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        IsProcessing = true;
        Orders = await OrderService.GetAllOrders();
        IsProcessing = false;
    }

    private IEnumerable<string> GetUniqueStoreNames()
    {
        return Orders.Select(o => o.StoreName).Distinct();
    }

    private IEnumerable<OrderDTO> FilteredOrders =>
        Orders.Where(o =>
            (string.IsNullOrEmpty(selectedStoreName) || o.StoreName == selectedStoreName) &&
            (string.IsNullOrEmpty(searchText) ||
             o.CustomerName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             o.EmployeeName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             o.CityName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             o.Number.Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    private void CreateOrder()
    {
        NavigationManager.NavigateTo("/orders/create");
    }

    private void UpdateOrder(int orderId)
    {
        NavigationManager.NavigateTo($"/orders/edit/{orderId}");
    }

    private async Task DeleteOrder(int orderId)
    {
        SelectedOrderId = orderId;
        await _js.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && SelectedOrderId != 0)
        {
            await OrderService.DeleteOrder(SelectedOrderId);
            await _js.ToastrSuccess("Order deleted successfully.");
            await LoadOrders();
            await _js.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsProcessing = false;
    }

    private async Task ViewOrderItems(int orderId)
    {
        SelectedOrderId = orderId;
        await _js.InvokeVoidAsync("ShowOrderModal");
    }
}

@page "/employees"
@inject IEmployeeService _employeeService
@inject NavigationManager _nav
@inject IJSRuntime _js
@using Radzen.Blazor

<_DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<h3>Employees</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <select class="form-select" @bind="selectedCityName">
            <option value="">All Cities</option>
            @foreach (var cityName in GetUniqueCityNames())
            {
                <option value="@cityName">@cityName</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="selectedStoreId">
            <option value="">All Stores</option>
            @foreach (var store in GetFilteredStores())
            {
                <option value="@store.StoreId">@store.StoreName - @store.CityName</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <input type="text" class="form-control" placeholder="Search..." @bind="searchText" />
    </div>
    <div class="col-md-3 text-right">
        <button class="btn btn-success" @onclick="CreateEmployee"> + Create</button>
    </div>
</div>

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50" AllowPaging="true" AllowSorting="true"
                    Data="FilteredEmployees" TItem="EmployeeDTO" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="EmployeeDTO" Title="Name" Width="150px">
                <Template Context="data">
                    @data.FirstName @data.LastName
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="EmployeeDTO" Property="Phone" Title="Phone" Width="150px" />
            <RadzenDataGridColumn TItem="EmployeeDTO" Title="Store" Width="200px">
                <Template Context="data">
                    @GetStoreInfo(data.StoreId)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="EmployeeDTO" Title="Actions" Width="200px">
                <Template Context="data">
                    <RadzenButton Click="@(args => EditEmployee(data.EmployeeId))" Icon="edit" Style="margin-right: 5px; width: 30px; height: 30px;" />
                    <RadzenButton Click="@(args => DeleteEmployee(data.EmployeeId))" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="margin-right: 5px; width: 30px; height: 30px;" />
                    <RadzenButton Click="@(args => ViewOrders(data))" Icon="shopping_cart" ButtonStyle="ButtonStyle.Dark" Style="width: 30px; height: 30px;" />
                    <RadzenButton Click="@(args => ViewSupplies(data))" Icon="local_shipping" ButtonStyle="ButtonStyle.Dark" Style="width: 30px; height: 30px;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<EmployeeDTO> Employees { get; set; } = new List<EmployeeDTO>();
    public IEnumerable<StoreDTO> Stores { get; set; } = new List<StoreDTO>();
    public string searchText { get; set; } = "";
    private int? selectedStoreId { get; set; }
    private int DeleteEmployeeId { get; set; } = 0;
    private string selectedCityName { get; set; }

    private IEnumerable<string> GetUniqueCityNames()
    {
        return Stores.Select(s => s.CityName).Distinct();
    }

    private IEnumerable<StoreDTO> GetFilteredStores()
    {
        if (string.IsNullOrEmpty(selectedCityName))
        {
            return Stores;
        }
        else
        {
            return Stores.Where(s => s.CityName == selectedCityName);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        await LoadStores();
    }

    private async Task LoadEmployees()
    {
        IsProcessing = true;
        Employees = await _employeeService.GetAllEmployees();
        IsProcessing = false;
    }

    private async Task LoadStores()
    {
        Stores = await _employeeService.GetAllStores();
    }

    public IEnumerable<EmployeeDTO> FilteredEmployees =>
    Employees.Where(e =>
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return true;

        var searchParts = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        foreach (var part in searchParts)
        {
            if (e.FirstName.StartsWith(part, StringComparison.OrdinalIgnoreCase) ||
            e.LastName.StartsWith(part, StringComparison.OrdinalIgnoreCase) ||
            e.Phone.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
        }

        return false;
    })
    .Where(e =>
        (string.IsNullOrEmpty(selectedCityName) || Stores.Any(s => s.CityName == selectedCityName && s.StoreId == e.StoreId)) &&
        (selectedStoreId == null || e.StoreId == selectedStoreId));

    private string GetStoreInfo(int? storeId)
    {
        if (storeId.HasValue)
        {
            var store = Stores.FirstOrDefault(s => s.StoreId == storeId);
            if (store != null)
            {
                return $"{store.StoreName} - {store.CityName}, {store.Address}";
            }
        }
        return string.Empty;
    }

    private void CreateEmployee()
    {
        _nav.NavigateTo("/employees/create");
    }

    private void EditEmployee(int employeeId)
    {
        _nav.NavigateTo($"/employees/edit/{employeeId}");
    }

    private async Task DeleteEmployee(int employeeId)
    {
        DeleteEmployeeId = employeeId;
        await _js.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private void ViewOrders(EmployeeDTO employee)
    {
        _nav.NavigateTo($"/orders?search={employee.FirstName} {employee.LastName}");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteEmployeeId != 0)
        {
            await _employeeService.DeleteEmployee(DeleteEmployeeId);
            await _js.ToastrSuccess("Employee deleted successfully.");
            await LoadEmployees();
            await _js.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsProcessing = false;
    }

    private void ViewSupplies(EmployeeDTO employee)
    {
        _nav.NavigateTo($"/supplies?search={employee.FirstName} {employee.LastName}");
    }
}

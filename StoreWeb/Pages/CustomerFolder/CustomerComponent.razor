@page "/customers"
@inject ICustomerService _customerService
@inject NavigationManager _nav
@inject IJSRuntime _js
@using Radzen.Blazor

<_DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<h3>Customers</h3>

<div class="row mb-3">
    <div class="col-md-4">
        <select class="form-select" @bind="selectedCustomerTypeId">
            <option value="">All Types</option>
            @foreach (var customerType in CustomerTypes)
            {
                <option value="@customerType.CustomerTypeId">@customerType.TypeName</option>
            }
        </select>
    </div>
    <div class="col-md-4">
        <input type="text" class="form-control" placeholder="Search..." @bind="searchText" />
    </div>
    <div class="col-md-4 text-right">
        <button class="btn btn-success" @onclick="CreateCustomer">
            + Create
        </button>
    </div>
</div>

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50" AllowPaging="true" AllowSorting="true"
                    Data="FilteredCustomers" TItem="CustomerDTO" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="CustomerDTO" Title="Name">
                <Template Context="data">
                    @data.FirstName @data.LastName
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CustomerDTO" Property="Email" Title="Email" Width ="200px"/>
            <RadzenDataGridColumn TItem="CustomerDTO" Property="Phone" Title="Phone" Width = "150px"/>
            <RadzenDataGridColumn TItem="CustomerDTO" Property="CustomerTypeName" Title="Type" Width="150px" />
            <RadzenDataGridColumn TItem="CustomerDTO" Title="Actions">
                <Template Context="data">
                    <RadzenButton Click="@(args => EditCustomer(data.CustomerId))" Icon="edit" Style="margin-right: 10px" />
                    <RadzenButton Click="@(args => DeleteCustomer(data.CustomerId))" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="margin-right: 10px" />
                    <RadzenButton Click="@(args => ViewOrders(data))" Icon="visibility" ButtonStyle="ButtonStyle.Dark" Text="View Orders" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<CustomerDTO> Customers { get; set; } = new List<CustomerDTO>();
    public string searchText { get; set; } = "";
    private int? selectedCustomerTypeId { get; set; }
    public IEnumerable<CustomerTypeDTO> CustomerTypes { get; set; } = new List<CustomerTypeDTO>();
    private int DeleteCustomerId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        IsProcessing = true;
        Customers = await _customerService.GetAllCustomers();
        CustomerTypes = await _customerService.GetAllCustomerTypes();
        IsProcessing = false;
    }

    public IEnumerable<CustomerDTO> FilteredCustomers =>
        Customers.Where(c =>
        {
            if (string.IsNullOrWhiteSpace(searchText))
                return true;

            var searchParts = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            foreach (var part in searchParts)
            {
                if (c.FirstName.StartsWith(part, StringComparison.OrdinalIgnoreCase) ||
                    c.LastName.StartsWith(part, StringComparison.OrdinalIgnoreCase) ||
                    c.Email.StartsWith(searchText, StringComparison.OrdinalIgnoreCase) ||
                    c.Phone.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }

            return false;
        })
        .Where(c => selectedCustomerTypeId == null || c.CustomerTypeId == selectedCustomerTypeId);

    private void CreateCustomer()
    {
        _nav.NavigateTo("/customers/create");
    }

    private void EditCustomer(int customerId)
    {
        _nav.NavigateTo($"/customers/edit/{customerId}");
    }

    private async Task DeleteCustomer(int customerId)
    {
        DeleteCustomerId = customerId;
        await _js.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteCustomerId != 0)
        {
            await _customerService.DeleteCustomer(DeleteCustomerId);
            await _js.ToastrSuccess("Customer deleted successfully.");
            await LoadCustomers();
            await _js.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsProcessing = false;
    }

    private void ViewOrders(CustomerDTO customer)
    {
        // Navigate to view orders page
        _nav.NavigateTo($"/orders?search={customer.FirstName} {customer.LastName}");
    }
}
